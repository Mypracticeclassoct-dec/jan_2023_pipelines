pipeline{
   agent { label 'nodejs' }
    stages {
        stage ('clone'){
            steps {
                git branch : 'main', url: "https://github.com/vamsibakka/spring-petclinic.git"
            }
        }
        stage ('package'){
            steps{
                withSonarQubeEnv('sq1'){
                sh 'mvn clean package sonar:sonar'
                }

                //sh 'mvn clean package sonar:sonar'
            }
        }
        /*stage('qualitygate'){
            steps{
                timeout(time:5,unit:'MINUTES'){
                    waitForQualityGate  abortPipeline: true
                }
            }
        }*/
        stage ('artifactory configuration'){
            steps{
                rtMavenDeployer(
                    id : "maven deployer",
                    serverId : "jfrog",
                    releaseRepo : "jenkinspip-libs-release-local",
                    snapshotRepo : "jenkinspip-libs-snapshot-local"
                )
                rtMavenResolver(
                    id : "maven resolver", //library for working with artifact repositories and dependency resolution
                    serverId : "jfrog",
                    releaseRepo : "jenkinspip-libs-release-local",
                    snapshotRepo : "jenkinspip-libs-snapshot-local"
                    
                )
                rtMavenRun(
                    tool : "maven3.6.3",
                    pom : "pom.xml",
                    goals : "clean install",
                    deployerId : "maven deployer",
                    resolverId : "maven resolver"
                )
                rtPublishBuildInfo(
                    serverId : "jfrog" // publishes BuildInfo to Artifactory. BuildInfo provides a manifest for the build and includes metadata about the modules, dependencies and other environment variables
                )
               
            }
        }
        stage('docker image'){
            steps{
                sh '''
                   docker image build -t vamsibakka/pet:2.0 .
                   docker image push vamsibakka/pet:2.0 
                   echo "docker image is pushed to the docker hub"
                   docker image tag pet:2.0 a0fcmuzrvd7po.jfrog.io/dockerjfrog-docker/pet:jfg-1.0
                   docker image push a0fcmuzrvd7po.jfrog.io/dockerjfrog-docker/pet:jfg-1.0
                   echo "docker image is pushed to the jfrog repository"
                '''
            }
        }
        post{
            always{
                mail to: "vamsikrishna.123.vk@gmail.com",
                subject: "BUILD IS DONE",
                body:"""The build is done the build number $env.BUILD_NUMBER"""
            }
            success{
              mail to: "vamsikrishna.123.vk@gmail.com",
              subject: "BUild IS SUCCESS",
              body: """The build is success in the build number $env.BUILD_NUMBER
                          $env.BUILD_URL
                          $env.BUILD_ID """
        }
          failure{
            mail to :" vamsikrishna.123.vk@gmail.com",
            subject: "BUILD IS FAILURE",
            body: """ The build is a failure the build number is $env.BUILD_NUMBER
                    $env.BUILD_ID """
          }
            }
        }
    }